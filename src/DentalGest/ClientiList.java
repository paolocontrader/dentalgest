/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DentalGest;

import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;


/**
 *
 * @author Paolo
 */
public final  class ClientiList extends javax.swing.JFrame {
  
    String msg1 = null;
     String msg3 = null;
    String msg2 = null;
    Connection conn=null;
    Connection connUpd=null;
    Connection connDel=null;
    Connection connDelCli=null;
    Connection connDelPrest=null;
    Connection connDelApp=null;
    Connection connSearch=null;
    Connection connRef=null;
    Connection connClick = null;
    Connection connCheck = null;
    Connection connPop = null;
    Connection connIns = null;
    Connection connUpdStato = null;
    ResultSet rsUpd=null;
    ResultSet rsDel=null;
    ResultSet rsSearch=null;
    ResultSet rs = null;
    Statement pstd=null;
    PreparedStatement pst=null;
    PreparedStatement pstUpd=null;
    PreparedStatement psclick = null;
        Statement pstDel=null;
        Statement pstDelCli=null;
        Statement pstDelApp=null;
        Statement pstDelPrest=null;
        PreparedStatement pstPop = null;
    PreparedStatement pstSearch=null;
    PreparedStatement pstcheck=null;
    PreparedStatement pstIns = null;
     ResultSet rsclick = null;
     ResultSet rsd = null;
     ResultSet rsPop = null;
     ResultSet rscheck = null;
    /**
     * Creates new form Clients
     */
    ClientiList() {
        initComponents();
          
        conn=Db.db();
         connDel= Db.db();
         connUpd=Db.db();
         connSearch= Db.db();
         connRef = Db.db();
         connClick = Db.db();
         connIns = Db.db();
         connCheck = Db.db();
         connDelApp = Db.db();
         connDelPrest = Db.db();
         connDelCli = Db.db();
         connUpdStato = Db.db();
    PopulateData();
    AnimationStation();
            
       
    }
    
//    public static boolean isMyResultSetEmpty(ResultSet rs) throws SQLException {
//         return (!rs.isBeforeFirst() && rs.getRow() == 0);
//    }
    
    public void AnimationStation() {
    MouseAdapter ma = new MouseAdapter() {
        int lastX, lastY;
   
        @Override
        public void mousePressed(MouseEvent e) {
            lastX = e.getXOnScreen();
            lastY = e.getYOnScreen();
        }
        
        @Override
        public void mouseDragged(MouseEvent e) {
            int x = e.getXOnScreen();
            int y = e.getYOnScreen();
            // Move frame by the mouse delta
            setLocation(getLocationOnScreen().x + x - lastX,
                    getLocationOnScreen().y + y - lastY);
            lastX = x;
            lastY = y;
        }
    };
    addMouseListener(ma);
    addMouseMotionListener(ma);
}
    private static ClientiList obj=null;
    
    public static ClientiList getObj(){
        if(obj==null){
            obj=new ClientiList();
        }return obj;
    }
        
    void Refresh() {
       
        int i = 0;
         int j=0; 
        String sql = "SELECT * FROM  pazienti ORDER BY nome ASC";
               

       try{
            pstd = connRef.createStatement();
            rsd = pstd.executeQuery(sql);
            tb1.setModel(DbUtils.resultSetToTableModel(rsd));
           
            i =tb1.getRowCount();
          
            System.out.println("Numero righe tabella prestazioni: "+(i));
            
            if(i==0){
                JOptionPane.showMessageDialog(null, "Nessuna prestazione disponibile");
            }
            
       }
          catch(HeadlessException | SQLException e){
           JOptionPane.showMessageDialog(null, "Errore caricamento prestazioni");

                  }
    }
    
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jDateChooserBeanInfo1 = new com.toedter.calendar.JDateChooserBeanInfo();
        bnt_agg_sek = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb1 = new javax.swing.JTable();
        bt_cerca = new javax.swing.JButton();
        txt_cerca = new javax.swing.JTextField();
        bt_elim2 = new javax.swing.JButton();
        bnt_mod = new javax.swing.JButton();
        lab_mail = new javax.swing.JLabel();
        txt_nome = new javax.swing.JTextField();
        lab_pec = new javax.swing.JLabel();
        txt_cognome = new javax.swing.JTextField();
        lab_codfisc = new javax.swing.JLabel();
        txt_codfisc = new javax.swing.JTextField();
        lab_formagiur = new javax.swing.JLabel();
        txt_recapito = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txt_nominativo = new javax.swing.JTextField();
        nom = new javax.swing.JTextField();
        cogn = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtdataN = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        id = new javax.swing.JTextField();
        combo_stato = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DentalGest");
        setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        bnt_agg_sek.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bnt_agg_sek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DentalGest/images/pulsanti/aggiungi_150x40.png"))); // NOI18N
        bnt_agg_sek.setAlignmentY(2.0F);
        bnt_agg_sek.setBorder(null);
        bnt_agg_sek.setBorderPainted(false);
        bnt_agg_sek.setContentAreaFilled(false);
        bnt_agg_sek.setFocusPainted(false);
        bnt_agg_sek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_agg_sekActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 133;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -40;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 5, 0, 0);
        getContentPane().add(bnt_agg_sek, gridBagConstraints);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        tb1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        tb1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tb1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tb1.setAutoscrolls(false);
        tb1.setFocusable(false);
        tb1.getTableHeader().setReorderingAllowed(false);
        tb1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tb1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 142;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 797;
        gridBagConstraints.ipady = 190;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 12);
        getContentPane().add(jScrollPane2, gridBagConstraints);

        bt_cerca.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bt_cerca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DentalGest/images/pulsanti/icona_lente_ingrandimento_cerca_40x40.png"))); // NOI18N
        bt_cerca.setAlignmentY(0.0F);
        bt_cerca.setBorder(null);
        bt_cerca.setBorderPainted(false);
        bt_cerca.setContentAreaFilled(false);
        bt_cerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_cercaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 16;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 102, 0, 0);
        getContentPane().add(bt_cerca, gridBagConstraints);

        txt_cerca.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_cerca.setMinimumSize(new java.awt.Dimension(86, 28));
        txt_cerca.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_cercaMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 120;
        gridBagConstraints.ipady = -3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(60, 10, 0, 0);
        getContentPane().add(txt_cerca, gridBagConstraints);

        bt_elim2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bt_elim2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DentalGest/images/pulsanti/elimina_150x40.png"))); // NOI18N
        bt_elim2.setBorder(null);
        bt_elim2.setBorderPainted(false);
        bt_elim2.setContentAreaFilled(false);
        bt_elim2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_elim2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 113;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -60;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 10, 0, 0);
        getContentPane().add(bt_elim2, gridBagConstraints);

        bnt_mod.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bnt_mod.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DentalGest/images/pulsanti/modifica_150x40.png"))); // NOI18N
        bnt_mod.setAlignmentY(2.0F);
        bnt_mod.setBorder(null);
        bnt_mod.setBorderPainted(false);
        bnt_mod.setContentAreaFilled(false);
        bnt_mod.setFocusPainted(false);
        bnt_mod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_modActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 41;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 37;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -50;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 2, 0, 0);
        getContentPane().add(bnt_mod, gridBagConstraints);

        lab_mail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lab_mail.setText("Nome:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 24;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 15, 0, 0);
        getContentPane().add(lab_mail, gridBagConstraints);

        txt_nome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_nome.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_nome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nomeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 59;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 55;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 9, 0, 0);
        getContentPane().add(txt_nome, gridBagConstraints);

        lab_pec.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lab_pec.setText("Cognome:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        getContentPane().add(lab_pec, gridBagConstraints);

        txt_cognome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_cognome.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_cognome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cognomeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        getContentPane().add(txt_cognome, gridBagConstraints);

        lab_codfisc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lab_codfisc.setText("Codice Fiscale:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 0);
        getContentPane().add(lab_codfisc, gridBagConstraints);

        txt_codfisc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_codfisc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 0, 0);
        getContentPane().add(txt_codfisc, gridBagConstraints);

        lab_formagiur.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lab_formagiur.setText("Recapito:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 41;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 19;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 2, 0, 0);
        getContentPane().add(lab_formagiur, gridBagConstraints);

        txt_recapito.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_recapito.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 77;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 56;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 0, 0);
        getContentPane().add(txt_recapito, gridBagConstraints);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DentalGest/images/pulsanti/apri-scheda-cliente_150x40.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.setFocusable(false);
        jButton1.setRequestFocusEnabled(false);
        jButton1.setRolloverEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 135;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -20;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(50, 10, 0, 0);
        getContentPane().add(jButton1, gridBagConstraints);

        txt_nominativo.setEditable(false);
        txt_nominativo.setBorder(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipady = -21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(txt_nominativo, gridBagConstraints);

        nom.setEditable(false);
        nom.setBorder(null);
        nom.setEnabled(false);
        nom.setFocusable(false);
        nom.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipady = -21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(nom, gridBagConstraints);

        cogn.setEditable(false);
        cogn.setBorder(null);
        cogn.setEnabled(false);
        cogn.setFocusable(false);
        cogn.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipady = -21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(cogn, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Data di Nascita: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 133;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        txtdataN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtdataN.setMinimumSize(new java.awt.Dimension(2, 19));
        txtdataN.setPreferredSize(new java.awt.Dimension(2, 19));
        txtdataN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtdataNActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 135;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 68;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        getContentPane().add(txtdataN, gridBagConstraints);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DentalGest/images/headers/ANAGRAFICA_PAZIENTE_220_x_80.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(295, 80));
        jLabel1.setMinimumSize(new java.awt.Dimension(295, 80));
        jLabel1.setPreferredSize(new java.awt.Dimension(295, 80));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = -77;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jLabel1, gridBagConstraints);

        jButton6.setText("Modifica stato");
        jButton6.setToolTipText("");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 133;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 20, 51, 0);
        getContentPane().add(jButton6, gridBagConstraints);

        id.setFont(new java.awt.Font("Tahoma", 0, 1)); // NOI18N
        id.setBorder(null);
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 17;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(id, gridBagConstraints);

        combo_stato.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "In corso", "Terminato", "Pagato" }));
        combo_stato.setSelectedIndex(-1);
        combo_stato.setToolTipText("");
        combo_stato.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 135;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 40, 51, 0);
        getContentPane().add(combo_stato, gridBagConstraints);

        setSize(new java.awt.Dimension(856, 519));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tb1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb1MouseClicked
       
            try
            {
                int row = tb1.getSelectedRow();
                String tbclick =(tb1.getModel().getValueAt(row, 2).toString());
                 String tbclick1 =(tb1.getModel().getValueAt(row, 1).toString());
                 
                   String tbclick3 =(tb1.getModel().getValueAt(row, 3).toString());
                String sql = "SELECT * FROM pazienti WHERE nome = ? and cognome = ? and datanascita =?";
                psclick = connClick.prepareStatement(sql);
                psclick.setString(1, tbclick);
                 psclick.setString(2, tbclick1);
                 psclick.setString(3, tbclick3);
                rsclick = psclick.executeQuery();
                if(rsclick.next())
                {
                    String add1 = rsclick.getString("nome");
                    txt_nome.setText(add1);
                    nom.setText(add1);
                    String add2 = rsclick.getString("cognome");
                    txt_cognome.setText(add2);
                    cogn.setText(add2);
                    String add3 = rsclick.getString("codice_fiscale");
                    txt_codfisc.setText(add3);
                    String add4 = rsclick.getString("cell");
                    txt_recapito.setText(add4);
                     String add5 = rsclick.getString("datanascita");
                    txtdataN.setText(add5);
                    String add6 = rsclick.getString("id");
                    id.setText(add6);
                    combo_stato.setSelectedItem(rsclick.getString("stato"));
                   msg1 = txt_nome.getText();
                   msg2 = txt_cognome.getText();
                   msg3 = id.getText();
                   System.out.println("Nome da passare: "+msg1);
                   System.out.println("Cognome da passare: "+msg2);
                   System.out.println("cf da passare: "+msg3);
                    
                    
                }
                
            }
            catch(SQLException e)
            {
                e.getMessage();
            }
        
            
            
            
    }//GEN-LAST:event_tb1MouseClicked

    private void bt_cercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_cercaActionPerformed
        // TODO add your handling code here:
        Search();
    }//GEN-LAST:event_bt_cercaActionPerformed

    private void bnt_agg_sekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_agg_sekActionPerformed
        // TODO add your handling code here:
        
         int leftLimit = 97; // letter 'a'
    int rightLimit = 122; // letter 'z'
    int targetStringLength = 10;
    Random random = new Random();

    String generatedString = random.ints(leftLimit, rightLimit + 1)
      .limit(targetStringLength)
      .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
      .toString();
     System.out.println("id utente: "+generatedString);
        String query_check = "select * from pazienti where codice_fiscale=?";
        String val1 = txt_nome.getText();
        String val2 = txt_cognome.getText();
        String val3 = txt_codfisc.getText();
        String val4 = txt_recapito.getText();
        String val5 = txtdataN.getText();
        String val6 = "In corso";
        int x = JOptionPane.showConfirmDialog(null, "Sei sicuro di voler aggiugere il seguente paziente?", "Aggiungi Paziente", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            try {
                System.out.println("Arrivo 1");
                pstcheck = connCheck.prepareStatement(query_check);
                pstcheck.setString(1, val3);
                rscheck = pstcheck.executeQuery();
                if (rscheck.next()) {
                    JOptionPane.showMessageDialog(null, "Paziente già esistente");
                } else {
                    System.out.println("Arrivo 2");
                    String sql = "insert into pazienti (nome,cognome,codice_fiscale,cell,datanascita,stato,id) values (?,?,?,?,?,?,?)";
                    pstIns = connIns.prepareStatement(sql);
                    System.out.println("Query: "+sql);
                    pstIns.setString(1, val1);
                    pstIns.setString(2, val2);
                    pstIns.setString(3, val3);
                    pstIns.setString(4, val4);
                    pstIns.setString(5, val5);
                    pstIns.setString(6, val6);
                    pstIns.setString(7, generatedString);
                    System.out.println("VALORI INSERIMENT PAZIENTE: " + val1 + " | " + val2 + " | " + val3 + " | " + val4 + " | " + val5 + " " + val6+ " " + generatedString);
                       
                        JOptionPane.showMessageDialog(null, "paziente aggiunto correttamente");

                    

                }
                pstIns.execute();
                txt_cognome.setText("");
                txt_codfisc.setText("");
                
                txt_nome.setText("");
                txt_recapito.setText("");
                txtdataN.setText("");
                PopulateData();
               
            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, "Errore aggiunta record");
            
            }
        }
        
    }//GEN-LAST:event_bnt_agg_sekActionPerformed

    private void bt_elim2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_elim2ActionPerformed
        // TODO add your handling code here:
        Object[] options = {"Si", "No"};
        String strNome = null;
         String strCognome = null;
         String cliente = null;
         String nascita = null;
         String id = null;
        int n = JOptionPane
                .showOptionDialog(null, "Sei sicuro di voler cancellare i pazienti selezionati?",
                        "Conferma cancellazione?",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options,
                        options[1]);

        if (n == 0) // Confirm Delete = Yes
        {

            for (int i = 0; i < tb1.getRowCount(); i++) {

                Boolean chkDel = Boolean.valueOf(tb1.getValueAt(i, 0).toString()); // Checked

                if(chkDel) // Checked to Delete
                {

                    strNome = tb1.getValueAt(i, 2)
                            .toString(); 
                    strCognome = tb1.getValueAt(i, 1)
                            .toString(); 
                    nascita = tb1.getValueAt(i, 3).toString();
                    cliente = strNome+" "+strCognome;
                    id= tb1.getValueAt(i, 6).toString();
                    System.out.println("Il cliente che viene terminato "+cliente);
                    
                    DeleteData(strNome, strCognome, nascita, id);
                    DeleteDataRich(cliente, nascita);
                    DeleteDataPrest(cliente, id);
                    DeleteDataCart(cliente, id);
                }
                
                    
                    

            }

            JOptionPane.showMessageDialog(null, "Paziente/i cancallati correttamente");
            txt_cognome.setText("");
                txt_codfisc.setText("");
                txt_recapito.setText("");
                txt_nome.setText("");
                txtdataN.setText("");
               
            PopulateData(); // Reload Table
 AppList.getObj().PopulateData();
                        //AppList.getObj().PopulateDataAll();
        }

  

 

PopulateData();


    }//GEN-LAST:event_bt_elim2ActionPerformed

    private void bnt_modActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_modActionPerformed
        // TODO add your handling code here:
       int x = JOptionPane.showConfirmDialog(null, "Sei sicuro di voler aggiornare l'anagrafica del seguente paziente?", "Aggiorna Anagrafica Paziente", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            try {
                String val1 = txt_nome.getText();
                String val2 = txt_cognome.getText();
                String val3 = txt_codfisc.getText();
                String val4 = txt_recapito.getText();
                String val5 = nom.getText();
                String val6 = cogn.getText();
                String val7 = txtdataN.getText();
                String val8 = id.getText();
                
                String sql = "update pazienti set nome=?,cognome=?,codice_fiscale=?,cell=?,datanascita=? where nome=? and cognome=? and id=?";
                pstUpd = connUpd.prepareStatement(sql);
                pstUpd.setString(1, val1);
                pstUpd.setString(2, val2);
                pstUpd.setString(3, val3);
                pstUpd.setString(4, val4);
                pstUpd.setString(5, val7);
                pstUpd.setString(6, val5);
                pstUpd.setString(7, val6);
                pstUpd.setString(8, val8);
              
                pstUpd.execute();
                JOptionPane.showMessageDialog(null, "Anagrafica paziente " + val1 + " " + val2 + " modificata correttamente");
                txt_nome.setText("");
                txt_cognome.setText("");
                txt_codfisc.setText("");
                txt_recapito.setText("");
                txtdataN.setText("");
                id.setText("");
                PopulateData();

            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, "Errore modifica anagrafica paziente");
            } 
        }
        PopulateData();
        
    }//GEN-LAST:event_bnt_modActionPerformed

    private void txt_nomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nomeActionPerformed

    private void txt_cognomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cognomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cognomeActionPerformed

    private void txt_cercaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_cercaMouseClicked
        // TODO add your handling code here:
        if(txt_cerca.getText().equals(""))
        {
            PopulateData();
        }
    }//GEN-LAST:event_txt_cercaMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
      String msg = txt_nominativo.getText();
      
      if(nom.getText().equals("") && cogn.getText().equals(""))
      {
          JOptionPane.showMessageDialog(null, "Selezionare paziente");
      }
      else
      {
          Clients.getObj().txt_n.setText(msg1);
      Clients.getObj().txt_c.setText(msg2);
      Clients.getObj().txt_d.setText(msg3);
      System.out.println("passaggio nome: "+msg1);
      System.out.println("passaggio cognome: "+msg2);
       System.out.println("passaggio data nascita: "+msg3);
      Clients.getObj().Update_table();
      Clients.getObj().PopulatePrest();
      Clients.getObj().setVisible(true);
      }
      
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtdataNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtdataNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtdataNActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

       
        try{

            String stato = combo_stato.getSelectedItem().toString();
            if(stato.isEmpty()){JOptionPane.showMessageDialog(null, "Nessuno Stato selezionato");}
            else{
                int x = JOptionPane.showConfirmDialog(null,"Sei sicuro di voler aggiornare il seguente stato?","Aggiorna Stato",JOptionPane.YES_NO_OPTION);
                if(x==0){
                    int row = tb1.getSelectedRow();

                    String nome = tb1.getValueAt(row, 2).toString();
                    String cognome = tb1.getValueAt(row, 1).toString();
                    String datanascita = tb1.getValueAt(row, 3).toString();
                    String id = tb1.getValueAt(row, 6).toString();
                    System.out.println("nome "+nome+" "+cognome);
                    System.out.println("datanascita "+datanascita);
                    System.out.println("stato "+stato);
                    System.out.print("qui arrivo");
                    String sql="update pazienti set stato='"+stato+"' where id = '"+id+"'";
                    PreparedStatement pstUpdStato = connUpdStato.prepareStatement(sql);
                    pstUpdStato.execute();
                    System.out.print("anche qui arrivo");
                    //tb1.removeColumn(tb1.getColumnModel().getColumn(1));
                    //tb1.removeColumn(tb1.getColumnModel().getColumn(5));

                    //tb1.removeColumn(tb1.getColumnModel().getColumn(5));

                    JOptionPane.showMessageDialog(null,"Stato modificato correttamente per "+nome+" "+cognome);
                    PopulateData();
                    txt_cognome.setText("");
                txt_codfisc.setText("");
                
                txt_nome.setText("");
                txt_recapito.setText("");
                txtdataN.setText("");
                combo_stato.setSelectedIndex(-1);
                

                    //AppList.getObj().PopulateDataAll();

                }}

                PopulateData(); // Reload Table
                txt_cerca.setText("");
                combo_stato.setSelectedIndex(-1);
            }
            catch(SQLException | HeadlessException e)
            {
                JOptionPane.showMessageDialog(null,"Errore modifica stato");
            }
            // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    
    public  void PopulateData() {

// Clear table
        tb1.setModel(new DefaultTableModel());
         txt_cerca.setText("");
// Model for Table
        DefaultTableModel model = new DefaultTableModel() {

            @Override
            public Class<?> getColumnClass(int column) {

                switch (column) {

                    case 0:

                        return Boolean.class;

                    case 1:

                        return String.class;

                    case 2:

                        return String.class;

                    case 3:

                        return String.class;

                    case 4:

                        return String.class;

                    case 5:

                        return String.class;

                    case 6:

                        return String.class;
                        
                    case 7:

                        return String.class;
                    case 8:

                        return String.class;

                    default:

                        return String.class;

                }

            }

        };

        tb1.setModel(model);
        
// Add Column
        model.addColumn("");
        
        model.addColumn("Cognome");
        
        model.addColumn("Nome");
        
         model.addColumn("Data di Nascita");
        
          model.addColumn("Recapito");
         
         model.addColumn("Stato");
         
          model.addColumn("");
         

        
      

        
    String sql = "SELECT * FROM  pazienti ORDER BY cognome ASC";
        try {

            pstPop = conn.prepareStatement(sql);

            

             rsPop = pstPop.executeQuery();

            int row = 0;
            
                while ((rsPop != null) && (rsPop.next())) {
                   
                model.addRow(new Object[0]);

                model.setValueAt(false, row, 0); // Checkbox

                model.setValueAt(rsPop.getString("cognome"), row, 1);
                
                 model.setValueAt(rsPop.getString("nome"), row, 2);
                 
                  model.setValueAt(rsPop.getString("datanascita"), row, 3);

                model.setValueAt(rsPop.getString("cell"), row, 4);
                
                model.setValueAt(rsPop.getString("stato"), row, 5);
                
                model.setValueAt(rsPop.getString("id"), row, 6);
                
                
                row++;

            }
                   System.out.println("Numero righe tabella prestazioni: "+row);
                if(row==0){
                JOptionPane.showMessageDialog(null, "Nessun paziente disponibile");
                }
            
            
           tb1.getColumnModel().getColumn(0).setPreferredWidth(20);
            tb1.getColumnModel().getColumn(1).setPreferredWidth(180);
            tb1.getColumnModel().getColumn(2).setPreferredWidth(180);
            tb1.getColumnModel().getColumn(3).setPreferredWidth(160);
            tb1.getColumnModel().getColumn(4).setPreferredWidth(160);
            tb1.getColumnModel().getColumn(5).setPreferredWidth(100);
             tb1.getColumnModel().getColumn(6).setMinWidth(0);
tb1.getColumnModel().getColumn(6).setMaxWidth(0); 
             tb1.getColumnModel().getColumn(6).setPreferredWidth(0);
            
            

        } catch (SQLException e) {

// TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, e.getMessage());


// TODO Auto-generated catch block

        }

    }

    private  void Search() {

// Clear table
        tb1.setModel(new DefaultTableModel());
         
// Model for Table
        DefaultTableModel model = new DefaultTableModel() {

            @Override
            public Class<?> getColumnClass(int column) {

                switch (column) {

                    case 0:

                        return Boolean.class;

                    case 1:

                        return String.class;

                    case 2:

                        return String.class;

                    case 3:

                        return String.class;

                    case 4:

                        return String.class;

                    case 5:

                        return String.class;

                    case 6:

                        return String.class;
                        
                    case 7:

                        return String.class;

                    default:

                        return String.class;

                }

            }

        };

        tb1.setModel(model);
        
// Add Column
        model.addColumn("");

        

        model.addColumn("Cognome");
        
        model.addColumn("Nome");
        
         model.addColumn("Data di Nascita");
         
          model.addColumn("Recapito");
         
          model.addColumn("Stato");
           model.addColumn("");
          

       

     String cerca = txt_cerca.getText();
     if(cerca.equals(""))
     {
         PopulateData();
     }
    String sql = "SELECT * FROM  pazienti WHERE nome LIKE ? or cognome LIKE ? ORDER BY nome ASC";
        try {

            pstSearch = connSearch.prepareStatement(sql);
            pstSearch.setString(1, "%"+ cerca + "%");
             pstSearch.setString(2, "%"+ cerca + "%");
            

             rsSearch = pstSearch.executeQuery();

            int row = 0;
            
                while ((rsSearch != null) && (rsSearch.next())) {
                   
                model.addRow(new Object[0]);

                model.setValueAt(false, row, 0); // Checkbox

               

                model.setValueAt(rsSearch.getString("cognome"), row, 1);
                
                 model.setValueAt(rsSearch.getString("nome"), row, 2);
                 
                  model.setValueAt(rsSearch.getString("datanascita"), row, 3);

                model.setValueAt(rsSearch.getString("cell"), row, 4);
                
                 model.setValueAt(rsSearch.getString("stato"), row, 5);
                 
                  model.setValueAt(rsSearch.getString("id"), row, 6);
                 

               
                
                row++;

            }
                   System.out.println("Numero righe tabella prestazioni: "+row);
                   if(row==0){
                   
                JOptionPane.showMessageDialog(null, "Nessun paziente disponibile");
                 PopulateData();
                }
                
            
          tb1.getColumnModel().getColumn(0).setPreferredWidth(20);
            tb1.getColumnModel().getColumn(1).setPreferredWidth(180);
            tb1.getColumnModel().getColumn(2).setPreferredWidth(180);
            tb1.getColumnModel().getColumn(3).setPreferredWidth(160);
            tb1.getColumnModel().getColumn(4).setPreferredWidth(160);
            tb1.getColumnModel().getColumn(5).setPreferredWidth(100);
            tb1.getColumnModel().getColumn(6).setMinWidth(0);
tb1.getColumnModel().getColumn(6).setMaxWidth(0); 
             tb1.getColumnModel().getColumn(6).setPreferredWidth(0);
        } catch (SQLException e) {

// TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, e.getMessage());
            PopulateData();


// TODO Auto-generated catch block

        }
      

    }
    
    void DeleteData(String strNome,String strCognome,String nascita,String id) {

        String sql = "DELETE FROM pazienti  WHERE nome = '" + strNome + "' AND cognome = '" + strCognome + "' and datanascita = '"+nascita+"' and id ='"+id+"'";
        try {
            pstDel = connDel.createStatement();
            System.out.println("QUERY DI ELIMINAZIONE: "+strNome+" "+strCognome+" "+nascita);
            pstDel.execute(sql);

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, e.getMessage());

        }

    }
    
     void DeleteDataRich(String cliente,String nascita) {

        String sql = "DELETE FROM richiami  WHERE cliente = '" + cliente + "' and datanascita = '"+nascita+"'";
        try {
            pstDel = connDel.createStatement();
            System.out.println("QUERY DI ELIMINAZIONE: "+cliente+" - "+nascita);
            pstDel.execute(sql);

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, e.getMessage());

        }

    }
    
    
    
    void DeleteDataPrest(String cliente,String id) {

        String sql = "DELETE FROM prestazione_cliente  WHERE cliente = '" + cliente + "' and cell = '"+id+"'";
        try {
            pstDelPrest = connDelPrest.createStatement();
            System.out.println("QUERY DI ELIMINAZIONE PRESTAZIONI: "+cliente+" "+id);
            pstDelPrest.execute(sql);
            //JOptionPane.showMessageDialog(null, "Prestazioni del paziente "+cliente+" eliminate correttamente");
        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, e.getMessage());

        }

                   
        

    }
    
//    void DeleteDataApp(String cliente) {
//
//        String sql = "DELETE FROM appuntamenti  WHERE cliente = '" + cliente + "'";
//        try {
//            pstDelApp = connDelApp.createStatement();
//            System.out.println("QUERY DI ELIMINAZIONE APPUNTAMENTI: "+cliente);
//            pstDelApp.execute(sql);
//            //JOptionPane.showMessageDialog(null, "Appuntamenti del paziente "+cliente+" eliminati correttamente");
//
//        } catch (SQLException e) {
//
//            JOptionPane.showMessageDialog(null, e.getMessage());
//
//        }
//
//                   
//        
//
//    }
    
    
    void DeleteDataCart(String cliente,String id) {

        String sql = "DELETE FROM cartella  WHERE paziente = '" + cliente + "' and cell = '"+id+"'";
        try {
            pstDelCli = connDelCli.createStatement();
            System.out.println("QUERY DI ELIMINAZIONE CARTELLA: "+cliente);
            pstDelCli.execute(sql);
            //JOptionPane.showMessageDialog(null, "Cartella clinica del paziente "+cliente+" eliminata correttamente");
            File file = new File("/dentalgest/cartelle/"+cliente+"-"+id);
            File file1 = new File("/dentalgest/reports/"+cliente+"-"+id);
            System.out.println("FIle 1: "+file1);
            deleteDirectory(file1);
            deleteDirectory(file);
            
            
            
        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, e.getMessage());

        } catch (IOException ex) {
            Logger.getLogger(ClientiList.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

void deleteDirectory(File file) throws IOException {
  if (file.isDirectory()) {
    File[] entries = file.listFiles();
    if (entries != null) {
      for (File entry : entries) {
        deleteDirectory(entry);
      }
    }
  }
  if (!file.delete()) {
    throw new IOException("Failed to delete " + file);
  }
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientiList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ClientiList().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnt_agg_sek;
    private javax.swing.JButton bnt_mod;
    private javax.swing.JButton bt_cerca;
    private javax.swing.JButton bt_elim2;
    private javax.swing.JTextField cogn;
    private javax.swing.JComboBox<String> combo_stato;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton6;
    private com.toedter.calendar.JDateChooserBeanInfo jDateChooserBeanInfo1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lab_codfisc;
    private javax.swing.JLabel lab_formagiur;
    private javax.swing.JLabel lab_mail;
    private javax.swing.JLabel lab_pec;
    private javax.swing.JTextField nom;
    private javax.swing.JTable tb1;
    private javax.swing.JTextField txt_cerca;
    public javax.swing.JTextField txt_codfisc;
    private javax.swing.JTextField txt_cognome;
    public javax.swing.JTextField txt_nome;
    public javax.swing.JTextField txt_nominativo;
    public javax.swing.JTextField txt_recapito;
    private javax.swing.JTextField txtdataN;
    // End of variables declaration//GEN-END:variables
}
